/* --------------------------------------------------------------------------------
 #
 #  4DPlugin-Continuity-Camera.cpp
 #	source generated by 4D Plugin Wizard
 #	Project : Continuity Camera
 #	author : miyako
 #	2021/09/03
 #  
 # --------------------------------------------------------------------------------*/

#include "4DPlugin-Continuity-Camera.h"

#pragma mark -

@interface
Swizzle_XMacNSView_saisierec_Class : NSResponder
{
    Class MainViewClass;
    IMP __orig_imp_resignFirstResponder;
}
@end

BOOL __swiz_resignFirstResponder(id self, SEL _cmd, id sender) {
    
    return YES;
}

IMP __swiz_imp_resignFirstResponder = (IMP)__swiz_resignFirstResponder;

@implementation Swizzle_XMacNSView_saisierec_Class

- (id)init
{
    if(!(self = [super init])) return self;

    MainViewClass = NSClassFromString(@"XMacNSView_saisierec");
    
    if(MainViewClass)
    {
        Method m = class_getInstanceMethod(MainViewClass, @selector(resignFirstResponder));
        __orig_imp_resignFirstResponder = method_setImplementation(m, __swiz_imp_resignFirstResponder);
    }

    return self;
}

- (void)dealloc
{
    if(MainViewClass)
    {
        Method m = class_getInstanceMethod(MainViewClass, @selector(resignFirstResponder));
        method_setImplementation(m, __orig_imp_resignFirstResponder);
    }
       
    [super dealloc];
}

@end

#pragma mark -

void PluginMain(PA_long32 selector, PA_PluginParameters params) {
    
	try
	{
        switch(selector)
        {
			// --- Continuity Camera
            
			case 1 :
				Continuity_camera_menu(params);
				break;

        }

	}
	catch(...)
	{

	}
}

#pragma mark -

typedef struct {
    
    NSString *title;
    CGFloat x;
    CGFloat y;
    NSWindow *window;
    
}continuity_camera_menu_ctx;

static NSImage *gottenImage;
    
@interface CCView : NSView <NSServicesMenuRequestor>
{
    
}

@end

@implementation CCView

- (id)initWithWindow:(NSWindow *)window
{
    if(!(self = [super init])) return self;
        
    [window.contentView addSubview:self];
    
    return self;
}

- (void)dealloc
{
    [self removeFromSuperview];
    
    [super dealloc];
}

- (id)validRequestorForSendType:(NSPasteboardType)sendType
                     returnType:(NSPasteboardType)returnType
{

    NSUInteger i = [[NSImage imageTypes]indexOfObjectPassingTest:^BOOL(id obj, NSUInteger idx, BOOL *stop)
                                    {
                                        if ([(NSString*)obj isEqualToString:returnType])
                                        {
                                            return YES;
                                        }
                                        return NO;
                                    }];
    if(NSNotFound != i) {
        return self;
    }else{
        return [super validRequestorForSendType:sendType returnType:returnType];
    }
        
}
- (BOOL)readSelectionFromPasteboard:(NSPasteboard *)pboard;
{
    if([pboard canReadItemWithDataConformingToTypes:[NSImage imageTypes]]) {
        gottenImage = [[NSImage alloc]initWithPasteboard:pboard];
        return true;
    }
    
    return false;
}

@end

static void doIt(continuity_camera_menu_ctx *ctx) {

    NSPoint clickPoint = NSMakePoint(ctx->x, ctx->window.contentView.bounds.size.height - ctx->y);
    
    @autoreleasepool {

        NSMenu *menu = [[NSMenu alloc]initWithTitle:ctx->title];
        NSEvent *theEvent = [NSEvent mouseEventWithType:NSEventTypeLeftMouseDown
                                               location:clickPoint
                                          modifierFlags:0
                                              timestamp:0
                                           windowNumber:ctx->window.windowNumber
                                                context:nil
                                            eventNumber:0
                                             clickCount:1
                                               pressure:1.];
        /*
        
         by default the NSWindow subclass (XMacNSView_saisierec)
         is the responder itself and resignFirstResponder returns NO
         but we must call makeFirstResponder to implement continuity camera
         
         */
            
        Swizzle_XMacNSView_saisierec_Class *swizzle_XMacNSView_saisierec;
        swizzle_XMacNSView_saisierec = [[Swizzle_XMacNSView_saisierec_Class alloc]init];

        /*
         
         because a subview is not released immediately
         do this outisde the instance lifecycle
         
         */
        
        CCView *sender = [[CCView alloc]initWithWindow:ctx->window];
        [sender.window makeFirstResponder:sender];
        
        [NSMenu popUpContextMenu:menu withEvent:theEvent forView:sender];

        [sender.window makeFirstResponder:sender.window];
        [swizzle_XMacNSView_saisierec release];

        [sender release];
        [menu release];
        
    }

}

#define cmd_current_form_window 827

void Continuity_camera_menu(PA_PluginParameters params) {

    PA_ObjectRef options = PA_GetObjectParameter(params, 1);
    
    gottenImage = nil;
    
    if(options) {
        CUTF16String _title;
        NSString *title;
        if(ob_get_a(options, L"title", &_title)) {
            title = [[NSString alloc]initWithCharacters:(const unichar *)_title.data() length:(NSUInteger)_title.length()];
        }else{
            title = @"Contextual Menu";
        }
        
        CGFloat x = ob_get_n(options, L"x");
        CGFloat y = ob_get_n(options, L"y");
        
        PA_long32 window;
        if(ob_is_defined(options, L"window")) {
            window = ob_get_n(options, L"window");
        }else{
            window = PA_GetLongintVariable(PA_ExecuteCommandByID(cmd_current_form_window, NULL, 0));
        }

        continuity_camera_menu_ctx ctx;
        ctx.title = title;
        ctx.x = x;
        ctx.y = y;
        ctx.window = (NSWindow *)PA_GetWindowPtr(reinterpret_cast<NSWindow *>(window));
        
        PA_RunInMainProcess((PA_RunInMainProcessProcPtr)doIt, &ctx);
        
    }
    
    PA_ObjectRef returnValue = PA_CreateObject();
    ob_set_b(returnValue, L"success", false);
    
    if(gottenImage) {
        
        ob_set_b(returnValue, L"success", true);
        NSData *data = [gottenImage TIFFRepresentation];
        PA_Picture image = PA_CreatePicture((void *)[data bytes], (PA_long32)[data length]);
        ob_set_p(returnValue, L"image", image);
        [gottenImage release];
    }

    PA_ReturnObject(params, returnValue);
}

